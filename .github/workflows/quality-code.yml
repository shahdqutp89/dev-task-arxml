name: PR Quality Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [labeled]
  issue_comment:
    types: [created]

jobs:
  should-run:
    runs-on: ubuntu-latest
    outputs:
      run-checks: ${{ steps.check.outputs.run-checks }}
    steps:
      - name: Check if we should run quality checks
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "run-checks=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request_target" && "${{ github.event.label.name }}" == "check" ]]; then
            echo "run-checks=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "issue_comment" && "${{ github.event.issue.pull_request }}" && "${{ contains(github.event.comment.body, 'recheck') }}" ]]; then
            echo "run-checks=true" >> $GITHUB_OUTPUT
          else
            echo "run-checks=false" >> $GITHUB_OUTPUT
          fi

  code-formatting:
    needs: should-run
    if: needs.should-run.outputs.run-checks == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Black
        run: |
          python -m pip install --upgrade pip
          pip install black

      - name: Run Black check
        run: black --check --diff .

  python-compatibility:
    needs: should-run
    if: needs.should-run.outputs.run-checks == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Check Python 3.12 compatibility
        run: |
          python_files=$(find . -name "*.py" -not -path "./.*" | head -20)
          if [ -z "$python_files" ]; then
            exit 0
          fi
          failed_files=()
          for file in $python_files; do
            if ! python -m py_compile "$file" 2>/dev/null; then
              failed_files+=("$file")
            fi
          done
          if [ ${#failed_files[@]} -ne 0 ]; then
            exit 1
          fi

  quality-checks-summary:
    needs: [should-run, code-formatting, python-compatibility]
    if: always() && needs.should-run.outputs.run-checks == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check all quality checks passed
        run: |
          if [[ "${{ needs.code-formatting.result }}" == "success" && "${{ needs.python-compatibility.result }}" == "success" ]]; then
            exit 0
          else
            exit 1
          fi

      - name: Comment on PR with results
        if: github.event_name != 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const formatResult = '${{ needs.code-formatting.result }}';
            const compatResult = '${{ needs.python-compatibility.result }}';
            let message = '## üîç Quality Checks Results\n\n';
            if (formatResult === 'success') {
              message += '‚úÖ **Code Formatting**: All files are properly formatted with Black\n';
            } else {
              message += '‚ùå **Code Formatting**: Some files need formatting. Run `black .` to fix.\n';
            }
            if (compatResult === 'success') {
              message += '‚úÖ **Python 3.12 Compatibility**: All files are syntactically compatible\n';
            } else {
              message += '‚ùå **Python 3.12 Compatibility**: Some files have syntax errors\n';
            }
            if (formatResult === 'success' && compatResult === 'success') {
              message += '\nüéâ **All quality checks passed!** This PR is ready for review.';
            } else {
              message += '\n‚ö†Ô∏è **Please fix the issues above before this PR can be merged.**\n\n';
              message += 'You can trigger a recheck by:\n';
              message += '- Adding the `check` label to this PR\n';
              message += '- Commenting `recheck` on this PR';
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
